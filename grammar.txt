statements		: NEWLINE* statement (NEWLINE+ statement)* NEWLINE*

statement		: KEYWORD:return expr?
				: KEYWORD:continue
				: KEYWORD:break
				: expr
	
expr			: KEYWORD:let IDENTIFIER EQ expr
				: IDENTIFIER ((LSQUARE expr RSQUARE)* | (DOT IDENTIFIER)*)? EQ expr
				: comp-expr ((KEYWORD:and|KEYWORD:or) comp-expr)*
	
comp-expr		: KEYWORD:not comp-expr
				: arith-expr ((EE|LT|GT|LTE|GTE) arith-expr)*
				
arith-expr		: term ((PLUS|MINUS) term)*
	
term			: factor ((MUL|DIV|MOD) factor)*
	
factor			: (PLUS|MINUS) factor
				: dice_expr
		
	
dice_expr		: DICE factor
				: power (DICE factor)?

power			: call (POW factor)*
	
call			: atom (LPAREN (expr (COMMA expr)*)? RPAREN)?
		
atom			: INT|FLOAT|STRING
				: LPAREN expr RPAREN
				: list_acc_expr
				: list-expr
				: dict-expr	
				: if-expr
				: for-expr
				: while-expr
				: func-def
				: dice_expr

dict-expr		: LBRAC (dict-item (COMMA dict-item)*)? RBRAC

dict-item		: atom COLON expr

list_acc_expr	: IDENTIFIER ((LSQUARE expr RSQUARE)* | (DOT IDENTIFIER)*)?

list-expr		: LSQUARE (expr (COMMA expr)*)? RSQUARE

func-def		: KEYWORD:function IDENTIFIER?
				LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN
				LBRAC statements RBRAC
				
while-expr		: KEYWORD:while expr RBRAC statements RBRAC

for-expr		: KEYWORD:for (LPAREN expr NEWLINE expr NEWLINE expr RPAREN | IDENTIFIER KEYWORD:in expr ) (NEWLINE)? 
				  (LBRAC statements RBRAC | expr) 
				
if-expr			: KEYWORD:if expr (NEWLINE)? (LBRAC statements RBRAC | expr) 
				(KEYWORD:else (NEWLINE)? (LBRAC statements RBRAC | if-expr | expr)?
				

